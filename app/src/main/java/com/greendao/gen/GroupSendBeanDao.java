package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.winderinfo.wechat.bean.GroupSendBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_SEND_BEAN".
*/
public class GroupSendBeanDao extends AbstractDao<GroupSendBean, Long> {

    public static final String TABLENAME = "GROUP_SEND_BEAN";

    /**
     * Properties of entity GroupSendBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SendTime = new Property(1, long.class, "sendTime", false, "SEND_TIME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property SendNum = new Property(3, int.class, "sendNum", false, "SEND_NUM");
        public final static Property SendName = new Property(4, String.class, "sendName", false, "SEND_NAME");
        public final static Property SendContent = new Property(5, String.class, "sendContent", false, "SEND_CONTENT");
        public final static Property SendImage = new Property(6, String.class, "sendImage", false, "SEND_IMAGE");
    }


    public GroupSendBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GroupSendBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_SEND_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 1: sendTime
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"SEND_NUM\" INTEGER NOT NULL ," + // 3: sendNum
                "\"SEND_NAME\" TEXT," + // 4: sendName
                "\"SEND_CONTENT\" TEXT," + // 5: sendContent
                "\"SEND_IMAGE\" TEXT);"); // 6: sendImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_SEND_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupSendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSendTime());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getSendNum());
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(5, sendName);
        }
 
        String sendContent = entity.getSendContent();
        if (sendContent != null) {
            stmt.bindString(6, sendContent);
        }
 
        String sendImage = entity.getSendImage();
        if (sendImage != null) {
            stmt.bindString(7, sendImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupSendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSendTime());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getSendNum());
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(5, sendName);
        }
 
        String sendContent = entity.getSendContent();
        if (sendContent != null) {
            stmt.bindString(6, sendContent);
        }
 
        String sendImage = entity.getSendImage();
        if (sendImage != null) {
            stmt.bindString(7, sendImage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupSendBean readEntity(Cursor cursor, int offset) {
        GroupSendBean entity = new GroupSendBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // sendTime
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // sendNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sendContent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sendImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupSendBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSendTime(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setSendNum(cursor.getInt(offset + 3));
        entity.setSendName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSendImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupSendBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupSendBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupSendBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
